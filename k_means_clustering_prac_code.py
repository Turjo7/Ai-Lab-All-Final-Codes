# -*- coding: utf-8 -*-
"""K_Means Clustering Prac.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PDwrTRiSsPmcf-B9EaOgMTmeCLQ-XxvN
"""

import numpy as np
from matplotlib import pyplot as plt
import copy

center_1 = np.array([1,1])
center_2 = np.array([5,5])
center_3 = np.array([8,1])

# Generate random data and center it to the three centers
data_1 = np.random.randn(200, 2) + center_1
data_2 = np.random.randn(200,2) + center_2
data_3 = np.random.randn(200,2) + center_3

data = np.concatenate((data_1, data_2, data_3), axis = 0)

plt.scatter(data[:,0], data[:,1], s=7)

# Number of clusters
k = 3
# Number of training data
n = data.shape[0]
# Number of features in the data
c = data.shape[1]

# Generate random centers, here we use sigma and mean to ensure it represent the whole data
mean = np.mean(data, axis = 0)
std = np.std(data, axis = 0)
centers = np.random.randn(k,c)*std + mean

# Plot the data and the centers generated as random
plt.scatter(data[:,0], data[:,1], s=7)
plt.scatter(centers[:,0], centers[:,1], marker='*', c='g', s=150)

print(data.shape)
print(centers.shape)

# Write K-means clustering code here
# Plot center1_list, center2_list and center3_list with green, red and blue color respectively. -> bonus 7.5
# Plot the centers with green, red, blue stars along with them. -> bonus 7.5 

centers_pre = np.zeros(centers.shape)
print(centers_pre)
centers_new = copy.deepcopy(centers)



data.shape
clusters = np.zeros(n)
distances = np.zeros((n,k))

error = np.linalg.norm(centers_new - centers_pre)
print(error)

while error != 0:
   
    for i in range(k):
        distances[:,i] = np.linalg.norm(data - centers[i], axis=1)
   
    clusters = np.argmin(distances, axis = 1)
    
    centers_old = copy.deepcopy(centers_new)
   
    for i in range(k):
        centers_new[i] = np.mean(data[clusters == i], axis=0)
    error = np.linalg.norm(centers_new - centers_old)
centers_new



plt.scatter(data[:,0], data[:,1], s=7)
plt.scatter(centers_new[:,0], centers_new[:,1], marker='*', c='r', s=150)

plt.scatter(data[:,0], data[:,1], s=7)
plt.scatter(centers_new[:,0], centers_new[:,1], marker='*', c='r', s=150)
plt.scatter(centers[:,0], centers[:,1], marker="x", color='r')

plt.scatter(centers[:, 0], centers[:, 1], c='black', s=200, alpha=0.5);